component electrolyser
% Two-port dynamic two-phase fluid component

% Use this component if there is an internal fluid state. If there is no
% internal fluid state and the flow is quasi-steady, use
% simscape.template.two_phase_fluid.two_port_steady
%test

% Define block nodes
nodes
    clnt_Qout	= foundation.thermal.thermal; % Qdot_clnt
    elec_pos    = foundation.electrical.electrical; % +
    elec_neg    = foundation.electrical.electrical; % âˆ£
	h2o_in      = foundation.thermal_liquid.thermal_liquid; % H2O_in
    %h2o_out     = foundation.thermal_liquid.thermal_liquid; % H2O_out
    h2o_out_an  = foundation.thermal_liquid.thermal_liquid; % H2O_out_an
    h2o_out_ca  = foundation.thermal_liquid.thermal_liquid; % H2O_out_ca
	h2_out      = foundation.gas.gas; % H2_out
    o2_out      = foundation.gas.gas; % O2_out
end

% Set node locations on block
annotations
    clnt_Qout   : Side = right;
    elec_pos    : Side = top;
    elec_neg    : Side = top;
	h2o_in      : Side = left;
    %h2o_out    : Side = left;
    h2o_out_an  : Side = left;
    h2o_out_ca  : Side = left;
	o2_out      : Side = right;
	h2_out      : Side = right;
end

% Add specified parameters here
parameters
	% Reference variables
	T_ref   = {293.15,    'K'     }; % Reference temperature of HHV value
	p_ref   = {101325,    'Pa'    }; % Reference pressure of HHV value
	HHV_h2  = {1.419E8,   'J/kg'  }; % H2 HHV @ ref T & p
	rho_h2  = {0.082,     'kg/m^3'}; % H2 density
	rho_o2  = {1.31,      'kg/m^3'}; % O2 density
	rho_h2o = {1000,      'kg/m^3'}; % Water density
	M_h2    = {0.0020158, 'kg/mol'}; % H2 molar mass
	M_o2    = {0.0319988, 'kg/mol'}; % O2 molar mass
	M_h2o =   {0.0180152, 'kg/mol'}; % Water molar mass

	% Geometry
	N_cel = {1, '1'}; % Number of cells
    A_cel = {1, 'm^2'}; % Cell active area

    %Ac_an  = {pemel.Ac_an,  'm^2'}; % Anode channel cross-section area
    %Prm_an = {pemel.Prm_an, 'm'  }; % Anode channel cross-section perimeter
	%L_an   = {pemel.L_an,   'm'  }; % Anode channel length
	vol_an = {1, 'm^3'}; % Anode volume
    
    %Ac_ca  = {pemel.Ac_ca,  'm^2'}; % Cathode channel cross-section area
    %Prm_ca = {pemel.Prm_ca, 'm'  }; % Cathode channel cross-section perimeter
	%L_ca   = {pemel.L_ca,   'm'  }; % Cathode channel length
	vol_ca = {1, 'm^3'}; % Cathode volume

	A_mem   = {1, 'm^2'       }; % Membrane area
	thk_mem = {0.001, 'm'     }; % Membrane thickness
	rho_mem = {0.001, 'kg/m^3'}; % Membrane density
    
    % Electrical
    V_stk_i = {[1.2:0.5:3], 'V'    }; % Polarisation curve voltage vector
    J_stk_i = {[1.2:0.5:3], 'A/m^2'}; % Polarisation curve current density vector

	% Thermal
	cp_bp   =  {1, 'J/(kg*K)'}; % BP plate Sp. heat (Cp)
	cp_mem  =  {1, 'J/(kg*K)'}; % Membrane Sp. heat (Cp)
	m_bp    =  {1, 'kg'      }; % BP plate mass
	
end

% Parameter groups
annotations
	UILayout = [
        UIGroup("Reference conditions", ...
        T_ref, p_ref)
		UIGroup("Cell specs", ...
        N_cel, A_cel, vol_ca, vol_an, A_mem, thk_mem, rho_mem, V_stk_i, J_stk_i)
		UIGroup("Thermal properties", ...
        m_bp, cp_bp, cp_mem)]
end

% Derived parameters & constants
parameters (Access = private)
	m_mem = rho_mem*(A_mem*thk_mem);  % Membrane mass [kg]

	R       = {8.314,    'J/(mol*K)'}; % Universal gas const
	F       = {96485.3,  'C/mol'    }; % Faraday const
	Dw_mem  = {1.28E-10, '1'        }; % Water diffusion coeff. @ Nafion membrane
	K_darcy = {1.58E-18, 'm^2'      }; % Nafion membrane permeability to water
	b_mem   = {0.03,     'K'		}; % Electro-osmotic drag coeff
end

variables
    % Through variables
	mdot_h2o_in     = {0, 'kg/s'}; % Water inlet mass flow
    mdot_h2o_out_an = {0, 'kg/s'}; % Water anode outlet mass flow
    mdot_h2o_out_ca = {0, 'kg/s'}; % Water cathode outlet mass flow
	mdot_o2_out     = {0, 'kg/s'}; % O2 outlet mass flow
	mdot_h2_out     = {0, 'kg/s'}; % H2 outlet mass flow
    
    Phi_h2o_in      = {0, 'W'}; % Water inlet energy flow
    Phi_h2o_out_an  = {0, 'W'}; % Water anode energy mass flow
    Phi_h2o_out_ca  = {0, 'W'}; % Water cathode energy mass flow
	Phi_o2_out      = {0, 'W'}; % O2 outlet energy flow
	Phi_h2_out      = {0, 'W'}; % H2 outlet energy flow
    
    I               = {0, 'A'}; % Current
 
    % Internal state variables
    T_stk     = {293.15, 'K'  }; % Stack temperature
    
	mass_h2o_an  = {0, 'kg'}; % Anode water mass
    mass_h2o_ca  = {0, 'kg'}; % Cathode water mass
	mass_o2      = {0, 'kg'}; % O2 mass
    mass_h2      = {0, 'kg'}; % H2 mass
    
    %p_ca      = {1, 'atm'}; % Cathode pressure
	%p_an      = {1, 'atm'}; % Anode pressure
    p_o2      = {1, 'atm'}; % O2 pressure
    p_h2      = {1, 'atm'}; % H2 pressure
	p_h2o_an  = {1, 'atm'}; % Anode water pressure
	p_h2o_ca  = {1, 'atm'}; % Cathode water pressure

	Qdot_clnt = {0, 'W'}; % Heat transferred to coolant
end

branches
	mdot_h2o_in     : h2o_in.mdot     -> *;
    mdot_h2o_out_an : h2o_out_an.mdot -> *;
	mdot_h2o_out_ca : h2o_out_ca.mdot -> *;
	mdot_h2_out     : h2_out.mdot     -> *;
	mdot_o2_out     : o2_out.mdot     -> *;

	Phi_h2o_in     : h2o_in.Phi     -> *;
    Phi_h2o_out_an : h2o_out_an.Phi -> *;
	Phi_h2o_out_ca : h2o_out_ca.Phi -> *;
	Phi_h2_out     : h2_out.Phi     -> *;
	Phi_o2_out     : o2_out.Phi     -> *;

	Qdot_clnt      : clnt_Qout.Q    -> *;

    I			   : elec_pos.i -> elec_neg.i;
end

% Internal components that calculate energy convection at ports A and B
%components (ExternalAccess=none)
    %convection_A = foundation.two_phase_fluid.port_convection(flow_area = area_A, length_scale = sqrt(4*area_A/pi));
    %convection_B = foundation.two_phase_fluid.port_convection(flow_area = area_B, length_scale = sqrt(4*area_B/pi));
%end


%connections
    %connect(A, convection_A.port);
    %connect(B, convection_B.port);
%end

% Place placeholder eq's here
intermediates
	% Cell thermal properties
 	cp_h2o_an = tablelookup(h2o_out_an.T_TLU, h2o_out_an.p_TLU, h2o_out_an.cp_TLU, T_stk, p_h2o_an, interpolation = linear, extrapolation = linear);
 	cp_h2o_ca = tablelookup(h2o_out_ca.T_TLU, h2o_out_ca.p_TLU, h2o_out_ca.cp_TLU, T_stk, p_h2o_ca, interpolation = linear, extrapolation = linear);
 	cp_h2     = tablelookup(h2_out.T_TLU1, h2_out.cp_TLU1, T_stk, interpolation = linear, extrapolation = linear);
 	cp_o2     = tablelookup(o2_out.T_TLU1, o2_out.cp_TLU1, T_stk, interpolation = linear, extrapolation = linear);
	
	cp_h2o_ref = tablelookup(h2o_out_ca.T_TLU, h2o_out_ca.p_TLU, h2o_out_ca.cp_TLU, T_ref, p_ref, interpolation = linear, extrapolation = linear);
 	cp_h2_ref  = tablelookup(h2_out.T_TLU1, h2_out.cp_TLU1, T_ref, interpolation = linear, extrapolation = linear);
 	cp_o2_ref  = tablelookup(o2_out.T_TLU1, o2_out.cp_TLU1, T_ref, interpolation = linear, extrapolation = linear);

	rho_h2o_an = tablelookup(h2o_out_an.T_TLU, h2o_out_an.p_TLU, h2o_out_an.rho_TLU, T_stk, p_h2o_an, interpolation = linear, extrapolation = linear);
 	rho_h2o_ca = tablelookup(h2o_out_ca.T_TLU, h2o_out_ca.p_TLU, h2o_out_ca.rho_TLU, T_stk, p_h2o_ca, interpolation = linear, extrapolation = linear);

	mu_h2o_an = tablelookup(h2o_out_an.T_TLU, h2o_out_an.p_TLU, h2o_out_an.mu_TLU, T_stk, p_h2o_an, interpolation = linear, extrapolation = linear);
	mu_h2o_ca = tablelookup(h2o_out_ca.T_TLU, h2o_out_ca.p_TLU, h2o_out_ca.mu_TLU, T_stk, p_h2o_ca, interpolation = linear, extrapolation = linear);

	R_h2 = R/M_h2; % H2 sp. gas const [J/(kg*K)]
	R_o2 = R/M_o2; % O2 sp. gas const [J/(kg*K)]

	% Electrical
    J = I/A_cel;    % Current density
    V_stk = tablelookup(J_stk_i, V_stk_i, J, interpolation = linear, extrapolation = nearest);
	P_stk = V_stk*I % Stack power
    
    % mdot_reacts
    mdot_h2o_reac = M_h2o*I/(2*F);
    mdot_h2_reac  = M_h2 *I/(2*F);
    mdot_o2_reac  = M_o2 *I/(2*F);
    
	% Energy flow components
    Qdot_reac		= P_stk - mdot_h2_reac*HHV_h2;
    Qdot_h2o_in		= Phi_h2o_in - mdot_h2o_in*cp_h2o_ref*T_ref;
	Qdot_h2o_out_an = Phi_h2o_out_an - mdot_h2o_out_an*cp_h2o_ref*T_ref;
	Qdot_h2o_out_ca = Phi_h2o_out_ca - mdot_h2o_out_ca*cp_h2o_ref*T_ref;
	Qdot_h2_out     = Phi_h2_out - mdot_h2_out*cp_h2_ref*T_ref;
	Qdot_o2_out     = Phi_o2_out - mdot_o2_out*cp_o2_ref*T_ref;

	c_stk = N_cel*(m_bp*cp_bp + m_mem*cp_mem) ...
		  + mass_h2o_an*cp_h2o_an ...
		  + mass_h2o_ca*cp_h2o_ca ...
		  + mass_o2*cp_o2 ...
		  + mass_h2*cp_h2;

	% Channel gas volumes
	vol_gas_an = vol_an - mass_h2o_an/rho_h2o_an;
	vol_gas_ca = vol_ca - mass_h2o_ca/rho_h2o_ca;

 	% Membrane
		% Avg. water thermal properties
		mu_h2o_avg  = (mu_h2o_an + mu_h2o_ca)/2
		%rho_h2o_avg = (rho_h2o_an + rho_h2o_ca)/2

		% Membrane water concentration @ channel
		a_mem_ca = 1;
		a_mem_an = 1;

		% Water mass flows thru membrane (an -> ca)
		%mdot_mem_eo = M_h2o*(0.0134*T_stk + b_mem)*(I/F);
		%mdot_mem_dd = M_h2o*A_mem*Dw_mem/(thk_mem*(a_mem_ca - a_mem_an));
		%mdot_mem_pe = M_h2o*A_mem*K_darcy*rho_h2o/(thk_mem*mu_h2o_avg*M_h2o);
		
		%mdot_h2o_mem = mdot_mem_eo + mdot_mem_dd - mdot_mem_pe;
end


equations
	% Anode mass balance
	%der(mass_h2o_an) == mdot_h2o_in - mdot_h2o_out_an - mdot_h2o_reac - mdot_h2o_mem;
	der(mass_o2)	  == mdot_o2_reac - mdot_o2_out;
	
	% Cathode mass balance
	%der(mass_h2o_ca) == mdot_h2o_mem - mdot_h2o_out_ca
	der(mass_h2)	  == mdot_h2_reac - mdot_h2_out;

    % Stack energy balance
	c_stk*der(T_stk) == Qdot_reac + Qdot_h2o_in - Qdot_h2o_out_an - Qdot_h2o_out_ca ...
					  - Qdot_o2_out - Qdot_h2_out - Qdot_clnt;

	% Species pressures
	p_o2 == (mass_o2*R_o2*T_stk)/vol_gas_an;
	p_h2 == (mass_h2*R_h2*T_stk)/vol_gas_ca;
	p_h2o_an == p_o2;
	p_h2o_ca == p_h2;

	% Electrical
	elec_pos.v - elec_neg.v == V_stk;
	%elec_pos.i - elec_neg.i == 0;
    

    % Equate variables for internal convection components
    %convection_A.mdot == mdot_A;
    %convection_A.Phi  == Phi_A;
    %convection_B.mdot == mdot_B;
    %convection_B.Phi  == Phi_B;

    %convection_A.ht_I == u_I + p_I*v_I + (mdot_A*v_I/area_A)^2/2;
    %convection_B.ht_I == u_I + p_I*v_I + (mdot_B*v_I/area_B)^2/2;

    % Validate that pressure and temperature are in valid region
    %assert(A.p >= A.p_min);
    %assert(A.p <= A.p_max);
    %assert(A.u >= A.u_min);
    %assert(A.u <= A.u_max);
    %assert(B.p >= A.p_min);
    %assert(B.p <= A.p_max);
    %assert(B.u >= A.u_min);
    %assert(B.u <= A.u_max);
end

end