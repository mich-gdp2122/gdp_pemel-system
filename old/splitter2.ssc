component splitter2

nodes
	A  = foundation.thermal_liquid.thermal_liquid; % A:left
    B1 = foundation.thermal_liquid.thermal_liquid; % f*A:right
	B0 = foundation.thermal_liquid.thermal_liquid; % (1-f)*A:right
end

inputs
    % Split factor
    f = {0.5, '1'}; % f:left
end

% Check split factor range
equations
	assert(f >= 0);
	assert(f <= 1);
end

variables
    % Through variables
    mdot_A  = {0,        'kg/s'}; % Mass flow rate into port A
    mdot_B1 = {0,        'kg/s'}; % Mass flow rate into port f*A
	mdot_B0 = {0,        'kg/s'}; % Mass flow rate into port (1-f)*A
    Phi_A   = {0,        'kW'  }; % Energy flow rate into port A
    Phi_B1  = {0,        'kW'  }; % Energy flow rate into port f*A
	Phi_B0  = {0,        'kW'  }; % Energy flow rate into port (1-f)*A
	%T       = {293.15,   'K'   }; % Temperature
	%p       = {0.101325, 'MPa' }; % Pressure
end

branches
    mdot_A  : A.mdot  -> *;
    mdot_B1 : B1.mdot -> *;
	mdot_B0 : B0.mdot -> *;
    Phi_A   : A.Phi   -> *;
    Phi_B1  : B1.Phi  -> *;
	Phi_B0  : B0.Phi  -> *;
end

equations
    % Mass balance
    mdot_A == mdot_B1 + mdot_B0;
	mdot_B1 == f*mdot_A;
	%mdot_B0 == (1-f)*mdot_A;

    % Energy balance
    Phi_A + Phi_B1 + Phi_B0 == 0;
	Phi_B1 == f*Phi_A;
	%Phi_B0 == (1-f)*Phi_A;

	% Across variables remain constant
	B1.T == A.T;
	B0.T == A.T;
	B1.p == A.p;
	B0.p == A.p;
end

end