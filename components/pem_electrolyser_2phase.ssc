component pem_electrolyser_2phase
% Two-port dynamic two-phase fluid component

% Use this component if there is an internal fluid state. If there is no
% internal fluid state and the flow is quasi-steady, use
% simscape.template.two_phase_fluid.two_port_steady

parameters
    % Add parameters here
    area_A = {0.01, 'm^2' }; % Cross-sectional area at port A
    area_B = {0.01, 'm^2' }; % Cross-sectional area at port B
end

nodes
    w_in = foundation.thermal_liquid.thermal_liquid;  % w_in:left
    w_out = foundation.thermal_liquid.thermal_liquid; % w_out:right
    clnt_in = = foundation.thermal_liquid.thermal_liquid;
end

variables
    % Through variables
    mdot_A = {0, 'kg/s'}; % Mass flow rate into port A
    mdot_B = {0, 'kg/s'}; % Mass flow rate into port B
    Phi_A  = {0, 'kW'  }; % Energy flow rate into port A
    Phi_B  = {0, 'kW'  }; % Energy flow rate into port B

    % States of internal fluid volume
    p_I   = {0.1, 'MPa'   }; % Pressure of fluid volume
    u_I   = {1500, 'kJ/kg'}; % Specific internal energy of fluid volume
    v_I   = {0.8,  'm^3/kg'}; % Specific volume of fluid volume
end

branches
    mdot_A : A.mdot -> *;
    mdot_B : B.mdot -> *;
    Phi_A  : A.Phi  -> *;
    Phi_B  : B.Phi  -> *;
end

% Internal components that calculate energy convection at ports A and B
components (ExternalAccess=none)
    convection_A = foundation.two_phase_fluid.port_convection(flow_area = area_A, length_scale = sqrt(4*area_A/pi));
    convection_B = foundation.two_phase_fluid.port_convection(flow_area = area_B, length_scale = sqrt(4*area_B/pi));
end

connections
    connect(A, convection_A.port);
    connect(B, convection_B.port);
end

equations
    % Momentum balance
    % Implement equation relating pressure difference with mass flow rate

    % Mass balance
    % Implement differential equations for internal fluid states p_I, u_I

    % Energy balance
    % Implement differential equations for internal fluid states p_I, u_I

    % Equate variables for internal convection components
    convection_A.mdot == mdot_A;
    convection_A.Phi  == Phi_A;
    convection_B.mdot == mdot_B;
    convection_B.Phi  == Phi_B;

    convection_A.ht_I == u_I + p_I*v_I + (mdot_A*v_I/area_A)^2/2;
    convection_B.ht_I == u_I + p_I*v_I + (mdot_B*v_I/area_B)^2/2;

    % Validate that pressure and temperature are in valid region
    assert(A.p >= A.p_min);
    assert(A.p <= A.p_max);
    assert(A.u >= A.u_min);
    assert(A.u <= A.u_max);
    assert(B.p >= A.p_min);
    assert(B.p <= A.p_max);
    assert(B.u >= A.u_min);
    assert(B.u <= A.u_max);
end

end