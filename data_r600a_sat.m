function data = data_r600a_sat(T, xA, xB) %[rho, v, cp, k, mu, Pr, dh, p, c, h, s, ds] = data_r600a_sat(T, xA, xB)
% Saturated fluid properties for isobutane/r600a (liquid and vapour)
%  T: Saturation temperature
% xA: Inlet quality/vapour mass fraction
% xB: Outlet quality/vapour mass fraction
%%
T_i = 273.15:5:363.15;	% Temperature vector [K]

psat_i = [...
	0.15696 ...
	0.18672 ...
	0.22061 ...
	0.25899 ...
	0.30222 ...
	0.35067 ...
	0.40472 ...
	0.46477 ...
	0.53121 ...
	0.60444 ...
	0.68490 ...
	0.77299 ...
	0.86916 ...
	0.97385 ...
	1.08750 ...
	1.21070 ...
	1.34380 ...
	1.48740 ...
	1.64200 ...
	];  % Saturated pressure table [MPa]


%% Saturated liquid data
rho_L_i = [...
	580.58 ...
	574.80 ...
	568.92 ...
	562.95 ...
	556.86 ...
	550.65 ...
	544.31 ...
	537.83 ...
	531.19 ...
	524.37 ...
	517.37 ...
	510.16 ...
	502.71 ...
	495.00 ...
	486.99 ...
	478.65 ...
	469.92 ...
	460.75 ...
	451.05 ...
	];  % Density [kg/m^3]

v_L_i = [...
	0.0017224 ...
	0.0017397 ...
	0.0017577 ...
	0.0017764 ...
	0.0017958 ...
	0.0018160 ...
	0.0018372 ...
	0.0018593 ...
	0.0018826 ...
	0.0019070 ...
	0.0019328 ...
	0.0019602 ...
	0.0019892 ...
	0.0020202 ...
	0.0020534 ...
	0.0020892 ...
	0.0021280 ...
	0.0021704 ...
	0.0022170 ...
	];  % Sp. volume [m^3/kg]

cp_L_i = 1000*[...
	2.2827 ...
	2.3100 ...
	2.3382 ...
	2.3676 ...
	2.3982 ...
	2.4300 ...
	2.4633 ...
	2.4982 ...
	2.5349 ...
	2.5737 ...
	2.6148 ...
	2.6587 ...
	2.7058 ...
	2.7567 ...
	2.8123 ...
	2.8736 ...
	2.9421 ...
	3.0199 ...
	3.1100 ...
	];  % Sp. heat capacity [kJ/(kg*K) -> J/(kg*K)]

 k_L_i = [...
	0.098632 ...
	0.096695 ...
	0.094788 ...
	0.092913 ...
	0.091071 ...
	0.089262 ...
	0.087489 ...
	0.085752 ...
	0.084051 ...
	0.082387 ...
	0.080761 ...
	0.079173 ...
	0.077623 ...
	0.076111 ...
	0.074637 ...
	0.073201 ...
	0.071801 ...
	0.070439 ...
	0.069113 ...
	];  % Thermal conductivity [W/(m*K)]

mu_L_i = [...
	0.00019856 ...
	0.00018766 ...
	0.00017754 ...
	0.00016812 ...
	0.00015934 ...
	0.00015113 ...
	0.00014343 ...
	0.00013620 ...
	0.00012939 ...
	0.00012296 ...
	0.00011687 ...
	0.00011108 ...
	0.00010556 ...
	0.00010029 ...
	9.5002E-05 ...
	9.0400E-05 ...
	8.5600E-05 ...
	8.1000E-05 ...
	7.6600E-05 ...
	];  % Dynamic viscosity [Pa*s]

 h_L_i = 1000*[...
	200.00 ...
	211.50 ...
	223.15 ...
	234.94 ...
	246.88 ...
	258.98 ...
	271.24 ...
	283.67 ...
	296.28 ...
	309.07 ...
	322.06 ...
	335.25 ...
	348.66 ...
	362.29 ...
	376.17 ...
	390.31 ...
	404.73 ...
	419.46 ...
	434.54 ...
	];  % Sp. enthalpy [kJ/kg -> J/kg]

 s_L_i = 1000*[...
	1.0000 ...
	1.0415 ...
	1.0828 ...
	1.1239 ...
	1.1647 ...
	1.2053 ...
	1.2458 ...
	1.2861 ...
	1.3263 ...
	1.3664 ...
	1.4064 ...
	1.4464 ...
	1.4863 ...
	1.5263 ...
	1.5664 ...
	1.6065 ...
	1.6469 ...
	1.6874 ...
	1.7283 ...
	]; % Sp. entropy [kJ/(kg*K) -> J/(kg*K)]

 c_L_i = [ ...
	961.46 ...
	933.21 ...
	905.02 ...
	876.87 ...
	848.76 ...
	820.65 ...
	792.54 ...
	764.40 ...
	736.20 ...
	707.93 ...
	679.56 ...
	651.05 ...
	622.37 ...
	593.49 ...
	564.35 ...
	534.92 ...
	505.13 ...
	474.91 ...
	444.17 ...
	];  % Speed of sound [m/s]


%% Saturated vapour data
rho_v_i = [...
	4.2570 ...
	5.0121 ...
	5.8670 ...
	6.8308 ...
	7.9134 ...
	9.1258 ...
	10.480 ...
	11.988 ...
	13.666 ...
	15.529 ...
	17.595 ...
	19.886 ...
	22.426 ...
	25.242 ...
	28.369 ...
	31.846 ...
	35.721 ...
	40.057 ...
	44.927 ...
	];  % Density [kg/m^3]

v_v_i = [...
	0.234910 ...
	0.199520 ...
	0.170440 ...
	0.146400 ...
	0.126370 ...
	0.109580 ...
	0.095422 ...
	0.083414 ...
	0.073174 ...
	0.064396 ...
	0.056833 ...
	0.050286 ...
	0.044592 ...
	0.039616 ...
	0.035250 ...
	0.031402 ...
	0.027994 ...
	0.024965 ...
	0.022258 ...
	];  % Sp. volume [m^3/kg]

cp_v_i = 1000*[...
	1.6190 ...
	1.6517 ...
	1.6856 ...
	1.7208 ...
	1.7573 ...
	1.7954 ...
	1.8353 ...
	1.8771 ...
	1.9210 ...
	1.9675 ...
	2.0167 ...
	2.0692 ...
	2.1253 ...
	2.1858 ...
	2.2519 ...
	2.3255 ...
	2.4094 ...
	2.5074 ...
	2.6248 ...
	];  % Sp. heat capacity (Cp) [kJ/(kg*K) -> J/(kg*K)]

k_v_i = [...
	0.014299 ...
	0.014781 ...
	0.015273 ...
	0.015776 ...
	0.016292 ...
	0.016823 ...
	0.017371 ...
	0.017937 ...
	0.018524 ...
	0.019136 ...
	0.019777 ...
	0.020450 ...
	0.021161 ...
	0.021915 ...
	0.022722 ...
	0.023589 ...
	0.024530 ...
	0.025560 ...
	0.026701 ...
	];  % Thermal conductivity [W/(m*K)]

mu_v_i = [...
	6.86E-06 ...
	6.99E-06 ...
	7.11E-06 ...
	7.24E-06 ...
	7.37E-06 ...
	7.50E-06 ...
	7.63E-06 ...
	7.77E-06 ...
	7.91E-06 ...
	8.06E-06 ...
	8.22E-06 ...
	8.38E-06 ...
	8.56E-06 ...
	8.74E-06 ...
	8.94E-06 ...
	9.16E-06 ...
	9.39E-06 ...
	9.65E-06 ...
	9.95E-06 ...
	];  % Dynamic viscosity [Pa*s]

h_v_i = 1000*[...
	554.34 ...
	561.06 ...
	567.78 ...
	574.50 ...
	581.21 ...
	587.90 ...
	594.57 ...
	601.21 ...
	607.80 ...
	614.34 ...
	620.82 ...
	627.22 ...
	633.53 ...
	639.72 ...
	645.77 ...
	651.64 ...
	657.31 ...
	662.73 ...
	667.86 ...
	];  % Sp. enthalpy [kJ/kg -> J/kg]

s_v_i = 1000*[...
	2.2972 ...
	2.2982 ...
	2.3 ...
	2.3023 ...
	2.3051 ...
	2.3085 ...
	2.3123 ...
	2.3165 ...
	2.3211 ...
	2.3259 ...
	2.3309 ...
	2.3361 ...
	2.3414 ...
	2.3467 ...
	2.3520 ...
	2.3572 ...
	2.3621 ...
	2.3667 ...
	2.3708 ...
	];  % Sp. entropy [kJ/(kg*K) -> J/(kg*K)]

c_v_i = [...
	197.87 ...
	198.20 ...
	198.38 ...
	198.39 ...
	198.24 ...
	197.90 ...
	197.39 ...
	196.68 ...
	195.77 ...
	194.64 ...
	193.29 ...
	191.70 ...
	189.86 ...
	187.75 ...
	185.36 ...
	182.67 ...
	179.65 ...
	176.29 ...
	172.56 ...
	];  % Speed of sound [m/s]


%% Calculations
data.p = interp1(T_i, psat_i, T, 'makima', 'extrap');	% Saturated pressure [MPa]

% Quality-weighted thermal properties @ state 1
vA   = (1-xA)*interp1(T_i, v_L_i, T, 'makima', 'extrap') ...
		+  xA*interp1(T_i, v_v_i, T, 'makima', 'extrap');
rhoA = (1-xA)*interp1(T_i, rho_L_i, T, 'makima', 'extrap') ...
		+  xA*interp1(T_i, rho_v_i, T, 'makima', 'extrap');
cpA  = (1-xA)*interp1(T_i, cp_L_i, T, 'makima', 'extrap') ...
		+  xA*interp1(T_i, cp_v_i, T, 'makima', 'extrap');
muA  = (1-xA)*interp1(T_i, mu_L_i, T, 'makima', 'extrap') ...
		+  xA*interp1(T_i, mu_v_i, T, 'makima', 'extrap');
kA   = (1-xA)*interp1(T_i, k_L_i, T, 'makima', 'extrap') ...
		+  xA*interp1(T_i, k_v_i, T, 'makima', 'extrap');
hA   = (1-xA)*interp1(T_i, h_L_i, T, 'makima', 'extrap') ...
		+  xA*interp1(T_i, h_v_i, T, 'makima', 'extrap');
sA   = (1-xA)*interp1(T_i, s_L_i, T, 'makima', 'extrap') ...
		+  xA*interp1(T_i, s_v_i, T, 'makima', 'extrap');
cA   = (1-xA)*interp1(T_i, c_L_i, T, 'makima', 'extrap') ...
		+  xA*interp1(T_i, c_v_i, T, 'makima', 'extrap');

% Avg. thermal properties between states (if xB specified)
if exist('xB','var') ~= 0
	% Quality-weighted thermal properties @ state 2
	vB   = (1-xB)*interp1(T_i, v_L_i, T, 'makima', 'extrap') ...
			+  xB*interp1(T_i, v_v_i, T, 'makima', 'extrap');
	rhoB = (1-xB)*interp1(T_i, rho_L_i, T, 'makima', 'extrap') ...
			+  xB*interp1(T_i, rho_v_i, T, 'makima', 'extrap');
	cpB  = (1-xB)*interp1(T_i, cp_L_i, T, 'makima', 'extrap') ...
			+  xB*interp1(T_i, cp_v_i, T, 'makima', 'extrap');
	muB  = (1-xB)*interp1(T_i, mu_L_i, T, 'makima', 'extrap') ...
			+  xB*interp1(T_i, mu_v_i, T, 'makima', 'extrap');
	kB   = (1-xB)*interp1(T_i, k_L_i, T, 'makima', 'extrap') ...
			+  xB*interp1(T_i, k_v_i, T, 'makima', 'extrap');
	hB   = (1-xB)*interp1(T_i, h_L_i, T, 'makima', 'extrap') ...
			+  xB*interp1(T_i, h_v_i, T, 'makima', 'extrap');
	sB   = (1-xB)*interp1(T_i, s_L_i, T, 'makima', 'extrap') ...
			+  xB*interp1(T_i, s_v_i, T, 'makima', 'extrap');
	cB   = (1-xB)*interp1(T_i, c_L_i, T, 'makima', 'extrap') ...
			+  xB*interp1(T_i, c_v_i, T, 'makima', 'extrap');

	% Average properties between states 1 & 2
	data.v   = mean([vA vB]);
	data.rho = mean([rhoA rhoB]);
	data.cp  = mean([cpA cpB]);
	data.mu  = mean([muA muB]);
	data.k   = mean([kA kB]);
	data.c   = mean([cA cB]);

	% Change in enthalpy & entropy between states 1 & 2
	data.dh  = hB - hA;
	data.ds  = sB - sA;
else
	% Output state 1 properties if only xA specified
	data.v   = vA;
	data.rho = rhoA;
	data.cp  = cpA;
	data.mu  = muA;
	data.k   = kA;
	data.h   = hA;
	data.c   = cA;
	data.s   = sA;
	data.dh  = NaN;  % Need to include dh in output, even if unused in this case
	data.ds  = NaN;  % Same w/ ds
end
data.Pr  = (data.mu*data.cp)/data.k;  % Prandtl number
end