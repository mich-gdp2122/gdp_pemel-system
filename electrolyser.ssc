component electrolyser
% Two-port dynamic two-phase fluid component

% Use this component if there is an internal fluid state. If there is no
% internal fluid state and the flow is quasi-steady, use
% simscape.template.two_phase_fluid.two_port_steady
%test

% Define block nodes
nodes
    clnt_in     = foundation.thermal_liquid.thermal_liquid; % clnt_in
    clnt_out    = foundation.thermal_liquid.thermal_liquid; % clnt_out
    elec_pos    = foundation.electrical.electrical; % +
    elec_neg    = foundation.electrical.electrical; % âˆ£
	h2o_in      = foundation.thermal_liquid.thermal_liquid; % H2O_in
    %h2o_out     = foundation.thermal_liquid.thermal_liquid; % H2O_out
    h2o_out_an  = foundation.thermal_liquid.thermal_liquid; % H2O_out_an
    h2o_out_ca  = foundation.thermal_liquid.thermal_liquid; % H2O_out_ca
	h2_out      = foundation.gas.gas; % H2_out
    o2_out      = foundation.gas.gas; % O2_out
end

% Set node locations on block
annotations
    clnt_in     : Side = right;
    clnt_out    : Side = left;
    elec_pos    : Side = top;
    elec_neg    : Side = top;
	h2o_in      : Side = left;
    %h2o_out    : Side = left;
    h2o_out_an  : Side = left;
    h2o_out_ca  : Side = left;
	o2_out      : Side = right;
	h2_out      : Side = right;
end

% Add specified parameters here
parameters
	% Flow conditions
	T_inf	  = {293.15, 'K'   }; % Ambient temperature

	% Geometry
	N_cel = {30, '1'}; % Number of cells
    A_cel = {0.1, 'm^2'}; % Cell active area

	%H_ca  = {0.5, 'mm' }; % Cathode cross-section height
	%W_ca  = {0.5, 'mm' }; % Cathode cross-section width
	%L_ca  = {10,  'mm' }; % Cathode channel length
	vol_ca = {0.1, 'm^3'}; % Cathode volume

 	%H_an  = {0.5,   'mm' }; % Anode cross-section height
	%W_an  = {0.5,   'mm' }; % Anode cross-section width
	%L_an  = {10,    'mm' }; % Anode channel length
	vol_an = {0.005, 'm^3'}; % Anode volume

	A_mem   = {0.1,      'm^2'}; % Membrane area
	thk_mem = {0.178E-3, 'm'  }; % Membrane thickness

	N_clt  = {50,    '1'       }; % No. cooling tubes per BP plate
	D_clt  = {0.002, 'm'       }; % Cooling tube diameter
	L_clt  = {0.2,   'm'       }; % Cooling tube length
    thk_bp = {0.002, 'm'       }; % BP plate thickness
    cp_bp  = {100,   'J/(kg*K)'}; % BP plate Sp. heat (Cp)
    k_bp   = {1,     'W/(m*K)' }; % BP plate heat conductivity
end

% Parameter groups
annotations
	UILayout = [
        UIGroup("Flow conditions", ...
        T_inf)
        UIGroup("Cell specs", ...
        N_cel, A_cel, vol_ca, vol_an, A_mem, thk_mem)
        UIGroup("Cooling specs", ...
        N_clt, D_clt, L_clt, thk_bp, cp_bp, k_bp)]
end

% Derived parameters
parameters (Access = private)
	% Cooling channels
	Ax_clt    = pi*(D_clt/2)^2; % Cross-sectional area [m^2]
	Prm_clt   = pi*D_clt;		% Cross-sectional perimeter [m]
	As_clt    = Prm_clt*L_clt;  % Pipe surface area [m^2]
	N_clt_stk = N_clt*N_cel;    % No. cooling tubes in stack

end

variables
    % Through variables
	mdot_h2o_in     = {0, 'kg/s'}; % Water inlet mass flow
    mdot_h2o_out_an = {0, 'kg/s'}; % Water anode outlet mass flow
    mdot_h2o_out_ca = {0, 'kg/s'}; % Water cathode outlet mass flow
	mdot_o2_out     = {0, 'kg/s'}; % O2 outlet mass flow
	mdot_h2_out     = {0, 'kg/s'}; % H2 outlet mass flow
    mdot_clnt       = {0, 'kg/s'}; % Coolant inlet mass flow
    
    Phi_h2o_in      = {0, 'W'}; % Water inlet energy flow
    Phi_h2o_out_an  = {0, 'W'}; % Water anode energy mass flow
    Phi_h2o_out_ca  = {0, 'W'}; % Water cathode energy mass flow
	Phi_o2_out      = {0, 'W'}; % O2 outlet energy flow
	Phi_h2_out      = {0, 'W'}; % H2 outlet energy flow
	%Phi_clnt_in     = {0, 'W'}; % Coolant inlet energy flow
	%Phi_clnt_out    = {0, 'W'}; % Coolant outlet energy flow
    
    I               = {0, 'A'}; % Current
 
    % Internal state variables
    T_stk     = {293.15, 'K'  }; % Stack temperature
    
	m_h2o_an  = {0, 'kg'}; % Anode water mass
    m_h2o_ca  = {0, 'kg'}; % Cathode water mass
	m_o2      = {0, 'kg'}; % O2 mass
    m_h2      = {0, 'kg'}; % H2 mass
    
    %p_ca      = {1, 'atm'}; % Cathode pressure
	%p_an      = {1, 'atm'}; % Anode pressure
    p_o2      = {1, 'atm'}; % O2 pressure
    p_h2      = {1, 'atm'}; % H2 pressure
	p_h2o_an  = {1, 'atm'}; % Anode water pressure
	p_h2o_ca  = {1, 'atm'}; % Cathode water pressure

	Qdot_clnt = {0, 'W'}; % Heat transferred to coolant

	V_stk     = {0, 'V'  }; % Voltage
end

branches
	mdot_h2o_in     : h2o_in.mdot     -> *;
    mdot_h2o_out_an : h2o_out_an.mdot -> *;
	mdot_h2o_out_ca : h2o_out_ca.mdot -> *;
	mdot_h2_out     : h2_out.mdot     -> *;
	mdot_o2_out     : o2_out.mdot     -> *;
    mdot_clnt       : clnt_in.mdot    -> clnt_out.mdot;

	Phi_h2o_in     : h2o_in.Phi     -> *;
    Phi_h2o_out_an : h2o_out_an.Phi -> *;
	Phi_h2o_out_ca : h2o_out_ca.Phi -> *;
	Phi_h2_out     : h2_out.Phi     -> *;
	Phi_o2_out     : o2_out.Phi     -> *;
    %Phi_clnt_in    : clnt_in.Phi    -> *;
	%Phi_clnt_out   : clnt_out.Phi   -> *;

    I			   : elec_pos.i -> elec_neg.i;
end

% Internal components that calculate energy convection at ports A and B
%components (ExternalAccess=none)
    %convection_A = foundation.two_phase_fluid.port_convection(flow_area = area_A, length_scale = sqrt(4*area_A/pi));
    %convection_B = foundation.two_phase_fluid.port_convection(flow_area = area_B, length_scale = sqrt(4*area_B/pi));
%end


%connections
    %connect(A, convection_A.port);
    %connect(B, convection_B.port);
%end

% Place placeholder eq's here
intermediates
	% Cell thermal properties
 	cp_h2o_in = tablelookup(h2o_in.T_TLU, h2o_in.p_TLU, h2o_in.cp_TLU, h2o_in.T, h2o_in.p, interpolation = linear, extrapolation = linear);
 	cp_h2o_an = tablelookup(h2o_out_an.T_TLU, h2o_out_an.p_TLU, h2o_out_an.cp_TLU, T_stk, p_h2o_an, interpolation = linear, extrapolation = linear);
 	cp_h2o_ca = tablelookup(h2o_out_ca.T_TLU, h2o_out_ca.p_TLU, h2o_out_ca.cp_TLU, T_stk, p_h2o_ca, interpolation = linear, extrapolation = linear);
 	cp_h2     = tablelookup(h2_out.T_TLU1, h2_out.cp_TLU1, T_stk, interpolation = linear, extrapolation = linear);
 	cp_o2     = tablelookup(o2_out.T_TLU1, o2_out.cp_TLU1, T_stk, interpolation = linear, extrapolation = linear);
	
	rho_h2o_an = tablelookup(h2o_out_an.T_TLU, h2o_out_an.p_TLU, h2o_out_an.rho_TLU, T_stk, p_h2o_an, interpolation = linear, extrapolation = linear);
 	rho_h2o_ca = tablelookup(h2o_out_ca.T_TLU, h2o_out_ca.p_TLU, h2o_out_ca.rho_TLU, T_stk, p_h2o_ca, interpolation = linear, extrapolation = linear);

	% Coolant flow properties
		% dT, avg T & p
		dT_clnt    = clnt_out.T - clnt_in.T
		T_avg_clnt = (clnt_out.T + clnt_in.T)/2;
		p_avg_clnt = (clnt_out.p + clnt_in.p)/2;

		% Thermal
		rho_clnt = tablelookup(clnt_in.T_TLU, clnt_in.p_TLU, clnt_in.rho_TLU, T_avg_clnt, p_avg_clnt, interpolation = linear, extrapolation = linear);
		cp_clnt  = tablelookup(clnt_in.T_TLU, clnt_in.p_TLU, clnt_in.cp_TLU, T_avg_clnt, p_avg_clnt, interpolation = linear, extrapolation = linear);
		k_clnt   = tablelookup(clnt_in.T_TLU, clnt_in.p_TLU, clnt_in.k_TLU,  T_avg_clnt, p_avg_clnt, interpolation = linear, extrapolation = nearest);
		mu_clnt  = tablelookup(clnt_in.T_TLU, clnt_in.p_TLU, clnt_in.mu_TLU, T_avg_clnt, p_avg_clnt, interpolation = linear, extrapolation = nearest);
        
		% Single channel mass flow & avg velocity (for whole stack)
		mdot_clnt_clt = mdot_clnt/N_clt_stk;
		u_clnt        = mdot_clnt_clt/(rho_clnt*Ax_clt);

		% Non-dim numbers
		%Re_clnt = mdot_clnt_clt*D_clt/(Ax_clnt*mu_clnt);
		Re_clnt = rho_clnt*u_clnt*D_clt/mu_clnt;
		Pr_clnt = mu_clnt*cp_clnt/k_clnt;

		% Darcy friction factor
		if Re_clnt <= 2300  % Laminar case
			f_clnt = 64/Re_clnt;
		elseif Re_clnt > 2300 && Re_clnt < 3000  % Transitional case (via interpolation)
			f_min = 64/(2300);
			f_max = ( 0.790*log(3000) - 1.64 )^(-2);
			
			f_clnt = f_min + ( (Re_clnt - 2300)/(3000 - 2300) )*(f_max - f_min);
		elseif Re_clnt >= 3000  % Turbulent case (Petukov correl.)
			f_clnt = ( 0.790*log(Re_clnt) - 1.64 )^(-2);  
		end

		% Nusselt no. (const. surface T)
		if Re_clnt <= 2300  % Laminar case
			Nu_clnt = 3.66;
		elseif Re_clnt > 2300 && Re_clnt < 3000  % Transitional case (via interpolation)
			Nu_min = 3.66;
			Nu_max = ( (f_clnt/8)*(3000 - 1000)*Pr_clnt )/( 1 + 12.7*((f_clnt/8)^0.5)*( Pr_clnt^(2/3) - 1 ) );
			
			Nu_clnt = Nu_min + ( (Re_clnt - 2300)/(3000 - 2300) )*(Nu_max - Nu_min);
		elseif Re_clnt >= 3000  % Turbulent case (Gnielinski correl.)
			Nu_clnt = ( (f_clnt/8)*(Re_clnt - 1000)*Pr_clnt )/( 1 + 12.7*((f_clnt/8)^0.5)*( Pr_clnt^(2/3) - 1 ) );  
		end

	% Coolant heat transfer
		% Heat transf. coeff.
		hQ_clnt = ( k_clnt*Nu_clnt )/D_clt;
 
		% E-NTU
		NTU       = hQ_clnt*As_clt/(mdot_clnt_clt*cp_clnt);
		efct_clnt = 1 - exp(-NTU);

		% Heat transferred
		Qdot_clnt = efct_clnt*mdot_clnt*cp_clnt*dT_clnt;

    % Coolant pressure drop
	dp_clnt = f_clnt*(L_clt/D_clt)*(0.5*rho_clnt*(u_clnt^2));
		
	% Electrical
	
	% Energy flow components

 	% Membrane
	
	% mdot_reacts

end


equations
	% Anode mass balance
	der(m_h2o_an) == mdot_h2o_an_in - m_h2o_an_out - mdot_h2o_reac - mdot_h2o_mem;
	der(m_o2)	  == mdot_o2_reac - mdot_o2_out;
	
	% Cathode mass balance
	der(m_h2o_ca) == mdot_h2o_mem - mdot_h2o_ca_out
	der(m_h2)	  == mdot_h2_reac - mdot_h2_out;

    % Stack energy balance
	c_stk*der(T_stk) == Qdot_reac + Phi_h2o_in - Phi_o2_out - Phi_h2_out ...
					  - Phi_h2o_an_out - Phi_h2o_ca_out - Qdot_clnt;

	% Species pressures
	p_o2 == (m_o2*R_o2*T_stk)/vol_g_an;
	p_h2 == (m_h2*R_h2*T_stk)/vol_g_ca;
	p_h2o_an == p_o2;
	p_h2o_ca == p_h2;

	% Coolant mass balance
	%clnt_in.mdot - clnt_out.mdot == 0;

	% Coolant energy balance
	%clnt_out.Phi - clnt_in.Phi == Qdot_clnt;

	% Coolant pressure drop
	clnt_in.p - clnt_out.p == dp_clnt;

	% Electrical
	elec_pos.v - elec_neg.v == V_stk;
	%elec_pos.i - elec_neg.i == 0;
    

    % Equate variables for internal convection components
    %convection_A.mdot == mdot_A;
    %convection_A.Phi  == Phi_A;
    %convection_B.mdot == mdot_B;
    %convection_B.Phi  == Phi_B;

    %convection_A.ht_I == u_I + p_I*v_I + (mdot_A*v_I/area_A)^2/2;
    %convection_B.ht_I == u_I + p_I*v_I + (mdot_B*v_I/area_B)^2/2;

    % Validate that pressure and temperature are in valid region
    %assert(A.p >= A.p_min);
    %assert(A.p <= A.p_max);
    %assert(A.u >= A.u_min);
    %assert(A.u <= A.u_max);
    %assert(B.p >= A.p_min);
    %assert(B.p <= A.p_max);
    %assert(B.u >= A.u_min);
    %assert(B.u <= A.u_max);
end

end